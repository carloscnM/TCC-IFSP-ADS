// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ResearchData.Portal.Data.Contextos;

namespace ResearchData.Portal.Migrations
{
    [DbContext(typeof(RDContextoDaAplicacao))]
    partial class RDContextoDaAplicacaoModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("DataCadastro");

                    b.Property<DateTime>("DataUltimoAcesso");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Nome");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Analises.Analise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ana_id");

                    b.Property<bool>("Ativa")
                        .HasColumnName("ana_ativa");

                    b.Property<DateTime?>("DataFim")
                        .HasColumnName("ana_datafim");

                    b.Property<DateTime>("DateInicio")
                        .HasColumnName("ana_datainicio");

                    b.Property<string>("Descricao")
                        .HasColumnName("ana_descricao");

                    b.Property<string>("Nome")
                        .HasColumnName("ana_nome");

                    b.Property<int>("ProjetoId")
                        .HasColumnName("PROJETO_pro_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("ANALISE");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Analises.ColaboradorAnalise", b =>
                {
                    b.Property<string>("UsuarioAplicacaoId")
                        .HasColumnName("USUARIO_usu_id");

                    b.Property<int>("AnaliseId")
                        .HasColumnName("ANALISE_ana_id");

                    b.Property<int>("Acesso")
                        .HasColumnName("col_acesso");

                    b.Property<DateTime>("DataInclusao")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnName("col_datainclusao");

                    b.HasKey("UsuarioAplicacaoId", "AnaliseId");

                    b.HasIndex("AnaliseId");

                    b.ToTable("COLABORADOR");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Analises.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("com_id");

                    b.Property<int>("AnaliseId")
                        .HasColumnName("ANALISE_ana_id");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnName("com_datainclusao");

                    b.Property<string>("TextoComentario")
                        .HasColumnName("com_comentario");

                    b.Property<string>("UsuarioAplicacaoId")
                        .HasColumnName("USUARIO_usu_id");

                    b.HasKey("Id");

                    b.HasIndex("AnaliseId");

                    b.HasIndex("UsuarioAplicacaoId");

                    b.ToTable("COMENTARIO");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Experimentos.Experimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("exp_id");

                    b.Property<string>("Descricao")
                        .HasColumnName("exp_descricao");

                    b.Property<string>("Nome")
                        .HasColumnName("exp_nome");

                    b.HasKey("Id");

                    b.ToTable("EXPERIMENTO");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Experimentos.TemplateExperimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("grudad_id");

                    b.Property<int>("CaracteristicaId")
                        .HasColumnName("CARACTERISTICA_car_id");

                    b.Property<int>("ExperimentoId")
                        .HasColumnName("EXPERIMENTO_exp_id");

                    b.HasKey("Id");

                    b.HasIndex("CaracteristicaId");

                    b.HasIndex("ExperimentoId");

                    b.ToTable("GRUPODEDADOS");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.Caracteristica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("car_id");

                    b.Property<bool>("Comun")
                        .HasColumnName("car_comun");

                    b.Property<string>("Descricao")
                        .HasColumnName("car_descricao");

                    b.Property<string>("TipoDoDado")
                        .IsRequired()
                        .HasColumnName("car_tipo");

                    b.HasKey("Id");

                    b.ToTable("CARACTERISTICA");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.Grupo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("gru_id");

                    b.Property<int>("AnaliseOrigem")
                        .HasColumnName("gru_analiseorigem");

                    b.Property<bool>("Ativo")
                        .HasColumnName("gru_ativo");

                    b.Property<DateTime>("DataInclusao")
                        .HasColumnName("gru_datainclusao");

                    b.Property<string>("Descricao")
                        .HasColumnName("gru_descricao");

                    b.Property<string>("Nome")
                        .HasColumnName("gru_nome");

                    b.Property<int>("ProjetoId")
                        .HasColumnName("PROJETO_pro_id");

                    b.HasKey("Id");

                    b.HasIndex("ProjetoId");

                    b.ToTable("GRUPO");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.Medicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("med_id");

                    b.Property<int?>("AnaliseId")
                        .HasColumnName("ANALISE_ana_id");

                    b.Property<int>("CaracteristicaId")
                        .HasColumnName("CARACTERISTICA_car_id");

                    b.Property<DateTime?>("DataCaptacao")
                        .HasColumnName("med_datacaptacao");

                    b.Property<DateTime?>("DataModificacao")
                        .HasColumnName("med_datamodificacao");

                    b.Property<int?>("ExperimentoId")
                        .HasColumnName("EXPERIMENTO_exp_id");

                    b.Property<bool?>("MedBool")
                        .HasColumnName("med_caracteristicabool");

                    b.Property<DateTime?>("MedData")
                        .HasColumnName("med_caracteristicadata");

                    b.Property<double?>("MedDouble")
                        .HasColumnName("med_caracteristicadouble");

                    b.Property<int?>("MedInt")
                        .HasColumnName("med_caracteristicaint");

                    b.Property<string>("MedString")
                        .HasColumnName("med_caracteristicastring");

                    b.Property<int>("SujeitoExperimentalId")
                        .HasColumnName("SUJEITO_sujexp_id");

                    b.HasKey("Id");

                    b.HasIndex("AnaliseId");

                    b.HasIndex("CaracteristicaId");

                    b.HasIndex("ExperimentoId");

                    b.HasIndex("SujeitoExperimentalId");

                    b.ToTable("MEDICAO");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.SujeitoExperimental", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("sujexp_id");

                    b.Property<int>("AnaliseId")
                        .HasColumnName("ANALISE_ana_id");

                    b.Property<string>("Descricacao")
                        .HasColumnName("sujexp_descricao");

                    b.Property<int?>("Externo")
                        .HasColumnName("sujexp_idexterno");

                    b.Property<int?>("GrupoId")
                        .HasColumnName("GRUPO_gru_id");

                    b.HasKey("Id");

                    b.HasIndex("AnaliseId");

                    b.HasIndex("GrupoId");

                    b.ToTable("SUJEITOEXPERIMENTAL");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Projetos.Negocio.Projeto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("pro_id");

                    b.Property<bool>("Ativo")
                        .HasColumnName("pro_ativo");

                    b.Property<DateTime?>("DataFinal")
                        .HasColumnName("pro_datafim");

                    b.Property<DateTime>("DataInicial")
                        .HasColumnName("pro_datainicio");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("pro_descricao");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnName("pro_titulo");

                    b.Property<string>("UsuarioAplicacaoId")
                        .IsRequired()
                        .HasColumnName("USUARIO_usu_id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioAplicacaoId");

                    b.ToTable("PROJETO");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Analises.Analise", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Projetos.Negocio.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Analises.ColaboradorAnalise", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Negocio.Analises.Analise", "Analise")
                        .WithMany("ColaboradorAnalise")
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao", "UsuarioAplicacao")
                        .WithMany("ColaboradorAnalise")
                        .HasForeignKey("UsuarioAplicacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Analises.Comentario", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Negocio.Analises.Analise", "Analise")
                        .WithMany()
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao", "UsuarioAplicacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAplicacaoId");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Experimentos.TemplateExperimento", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Negocio.Sujeitos.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResearchData.Portal.Models.Negocio.Experimentos.Experimento", "Experimento")
                        .WithMany("TempleteExperimento")
                        .HasForeignKey("ExperimentoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.Grupo", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Projetos.Negocio.Projeto", "Projeto")
                        .WithMany()
                        .HasForeignKey("ProjetoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.Medicao", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Negocio.Analises.Analise", "Analise")
                        .WithMany()
                        .HasForeignKey("AnaliseId");

                    b.HasOne("ResearchData.Portal.Models.Negocio.Sujeitos.Caracteristica", "Caracteristica")
                        .WithMany()
                        .HasForeignKey("CaracteristicaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResearchData.Portal.Models.Negocio.Experimentos.Experimento", "Experimento")
                        .WithMany()
                        .HasForeignKey("ExperimentoId");

                    b.HasOne("ResearchData.Portal.Models.Negocio.Sujeitos.SujeitoExperimental", "SujeitoExperimental")
                        .WithMany("Medicao")
                        .HasForeignKey("SujeitoExperimentalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Negocio.Sujeitos.SujeitoExperimental", b =>
                {
                    b.HasOne("ResearchData.Portal.Models.Negocio.Analises.Analise", "Analise")
                        .WithMany()
                        .HasForeignKey("AnaliseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ResearchData.Portal.Models.Negocio.Sujeitos.Grupo", "Grupo")
                        .WithMany()
                        .HasForeignKey("GrupoId");
                });

            modelBuilder.Entity("ResearchData.Portal.Models.Projetos.Negocio.Projeto", b =>
                {
                    b.HasOne("ResearchData.Portal.GerenciamentoUsuario.UsuarioAplicacao", "UsuarioAplicacao")
                        .WithMany()
                        .HasForeignKey("UsuarioAplicacaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
